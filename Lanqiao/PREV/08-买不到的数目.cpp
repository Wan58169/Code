//小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。
//
//小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买 10 颗糖。
//
//你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。
//
//本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。
//
//输入格式
//两个正整数，表示每种包装中糖的颗数(都不多于1000)
//
//输出格式
//一个正整数，表示最大不能买到的糖数
//
//样例输入1
//4 7
//样例输出1
//17
//样例输入2
//3 5
//样例输出2
//7
#include<iostream>
using namespace std;

int a,b;	//A包,B包
 
int main()
{
	cin >> a >> b;
	
	int limt = a*b;
	int *flag = new int[limt+1];
	//初始化flag数组
	for(int i=0; i<=limt; i++) {
		flag[i] = 0;				//默认都取不到 
	}
	//筛选能够取到的数
	for(int i=0; i<=b; i++) {		//a包的数量一定不会超过b 
		for(int j=0; j<=a; j++) {	//b包的数量一定不会超过a 
			int k = a*i+b*j;
			if(k <= limt) {
				flag[k] = 1;
			} else {
				continue;
			}
		}
	}	
	//找最大的不能组合数
	for(int i=limt; i>0; i--) {
		if(flag[i] == 0) {
			cout << i << endl;
			break;
		}
	}
	return 0;
}
